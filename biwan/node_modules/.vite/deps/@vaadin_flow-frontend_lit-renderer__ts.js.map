{
  "version": 3,
  "sources": ["../../@vaadin/flow-frontend/lit-renderer.ts"],
  "sourcesContent": ["import { render, html } from 'lit';\r\n\r\ntype RenderRoot = HTMLElement & { __litRenderer?: Renderer; _$litPart$?: any };\r\n\r\ntype ItemModel = { item: any; index: number };\r\n\r\ntype Renderer = (\r\n  root: RenderRoot,\r\n  rendererOwner: HTMLElement,\r\n  model: ItemModel\r\n) => void;\r\n\r\nconst _window = window as any;\r\n_window.Vaadin = _window.Vaadin || {};\r\n\r\n/**\r\n * Assigns the component a renderer function which uses Lit to render\r\n * the given template expression inside the render root element.\r\n *\r\n * @param component The host component to which the renderer runction is to be set\r\n * @param rendererName The name of the renderer function\r\n * @param templateExpression The content of the template literal passed to Lit for rendering.\r\n * @param returnChannel A channel to the server.\r\n * Calling it will end up invoking a handler in the server-side LitRenderer.\r\n * @param clientCallables A list of function names that can be called from within the template literal.\r\n * @param propertyNamespace LitRenderer-specific namespace for properties.\r\n * Needed to avoid property name collisions between renderers.\r\n */\r\n_window.Vaadin.setLitRenderer = (\r\n  component: HTMLElement,\r\n  rendererName: string,\r\n  templateExpression: string,\r\n  returnChannel: (name: string, itemKey: string, args: any[]) => void,\r\n  clientCallables: string[],\r\n  propertyNamespace: string\r\n) => {\r\n  // Dynamically created function that renders the templateExpression\r\n  // inside the given root element using Lit\r\n  const renderFunction = Function(`\r\n    \"use strict\";\r\n\r\n    const [render, html, returnChannel] = arguments;\r\n\r\n    return (root, {item, index}, itemKey) => {\r\n      ${clientCallables\r\n        .map((clientCallable) => {\r\n          // Map all the client-callables as inline functions so they can be accessed from the template literal\r\n          return `\r\n          const ${clientCallable} = (...args) => {\r\n            if (itemKey !== undefined) {\r\n              returnChannel('${clientCallable}', itemKey, args[0] instanceof Event ? [] : [...args]);\r\n            }\r\n          }`;\r\n        })\r\n        .join('')}\r\n\r\n      render(html\\`${templateExpression}\\`, root)\r\n    }\r\n  `)(render, html, returnChannel);\r\n\r\n  const renderer: Renderer = (root, _, { index, item }) => {\r\n    // Clean up the root element of any existing content\r\n    // (and Lit's _$litPart$ property) from other renderers\r\n    // TODO: Remove once https://github.com/vaadin/web-components/issues/2235 is done\r\n    if (root.__litRenderer !== renderer) {\r\n      root.innerHTML = '';\r\n      delete root._$litPart$;\r\n      root.__litRenderer = renderer;\r\n    }\r\n\r\n    // Map a new item that only includes the properties defined by\r\n    // this specific LitRenderer instance. The renderer instance specific\r\n    // \"propertyNamespace\" prefix is stripped from the property name at this point:\r\n    //\r\n    // item: { key: \"2\", lr_3_lastName: \"Tyler\"}\r\n    // ->\r\n    // mappedItem: { lastName: \"Tyler\" }\r\n    const mappedItem = {};\r\n    for (const key in item) {\r\n      if (key.startsWith(propertyNamespace)) {\r\n        mappedItem[key.replace(propertyNamespace, '')] = item[key];\r\n      }\r\n    }\r\n\r\n    renderFunction(root, { index, item: mappedItem }, item.key);\r\n  };\r\n\r\n  (renderer as any).__rendererId = propertyNamespace;\r\n  component[rendererName] = renderer;\r\n};\r\n\r\n/**\r\n * Removes the renderer function with the given name from the component\r\n * if the propertyNamespace matches the renderer's id.\r\n *\r\n * @param component The host component whose renderer function is to be removed\r\n * @param rendererName The name of the renderer function\r\n * @param rendererId The rendererId of the function to be removed\r\n */\r\n_window.Vaadin.unsetLitRenderer = (\r\n  component: HTMLElement,\r\n  rendererName: string,\r\n  rendererId: string\r\n) => {\r\n  // The check for __rendererId property is necessary since the renderer function\r\n  // may get overridden by another renderer, for example, by one coming from\r\n  // vaadin-template-renderer. We don't want LitRenderer registration cleanup to\r\n  // unintentionally remove the new renderer.\r\n  if (component[rendererName]?.__rendererId === rendererId) {\r\n    component[rendererName] = undefined;\r\n  }\r\n};\r\n"],
  "mappings": ";;;;;;AAYA,IAAM,UAAU;AAChB,QAAQ,SAAS,QAAQ,UAAU,CAAC;AAepC,QAAQ,OAAO,iBAAiB,CAC9B,WACA,cACA,oBACA,eACA,iBACA,sBACG;AAGH,QAAM,iBAAiB,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAM1B,gBACC,IAAI,CAAC,mBAAmB;AAEvB,WAAO;AAAA,kBACC;AAAA;AAAA,+BAEa;AAAA;AAAA;AAAA,EAGvB,CAAC,EACA,KAAK,EAAE;AAAA;AAAA,qBAEK;AAAA;AAAA,GAElB,EAAE,oBAAQ,kBAAM,aAAa;AAE9B,QAAM,WAAqB,CAAC,MAAM,GAAG,EAAE,OAAO,KAAK,MAAM;AAIvD,QAAI,KAAK,kBAAkB,UAAU;AACnC,WAAK,YAAY;AACjB,aAAO,KAAK;AACZ,WAAK,gBAAgB;AAAA,IACvB;AASA,UAAM,aAAa,CAAC;AACpB,eAAW,OAAO,MAAM;AACtB,UAAI,IAAI,WAAW,iBAAiB,GAAG;AACrC,mBAAW,IAAI,QAAQ,mBAAmB,EAAE,KAAK,KAAK;AAAA,MACxD;AAAA,IACF;AAEA,mBAAe,MAAM,EAAE,OAAO,MAAM,WAAW,GAAG,KAAK,GAAG;AAAA,EAC5D;AAEA,EAAC,SAAiB,eAAe;AACjC,YAAU,gBAAgB;AAC5B;AAUA,QAAQ,OAAO,mBAAmB,CAChC,WACA,cACA,eACG;AAvGL;AA4GE,QAAI,eAAU,kBAAV,mBAAyB,kBAAiB,YAAY;AACxD,cAAU,gBAAgB;AAAA,EAC5B;AACF;",
  "names": []
}
