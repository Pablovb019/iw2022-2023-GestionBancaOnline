{
  "version": 3,
  "sources": ["../../@vaadin/flow-frontend/vaadin-big-decimal-field.js", "dep:@vaadin_flow-frontend_vaadin-big-decimal-field__js"],
  "sourcesContent": ["/*\r\n * Copyright 2000-2022 Vaadin Ltd.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\r\n * use this file except in compliance with the License. You may obtain a copy of\r\n * the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\r\n * License for the specific language governing permissions and limitations under\r\n * the License.\r\n */\r\n(function() {\r\n\r\n  let memoizedTemplate;\r\n\r\n  customElements.whenDefined('vaadin-text-field').then(() => {\r\n\r\n    class BigDecimalFieldElement extends customElements.get('vaadin-text-field') {\r\n\r\n      static get template() {\r\n        if (!memoizedTemplate) {\r\n          memoizedTemplate = super.template.cloneNode(true);\r\n          memoizedTemplate.innerHTML +=\r\n            `<style>\r\n                  :host {\r\n                    width: 8em;\r\n                  }\r\n\r\n                  :host([dir=\"rtl\"]) [part=\"input-field\"] {\r\n                    direction: ltr;\r\n                  }\r\n\r\n                  :host([dir=\"rtl\"]) [part=\"input-field\"] ::slotted(input) {\r\n                    --_lumo-text-field-overflow-mask-image: linear-gradient(to left, transparent, #000 1.25em) !important;\r\n                  }\r\n            </style>`;\r\n        }\r\n        return memoizedTemplate;\r\n      }\r\n\r\n      static get is() {\r\n        return 'vaadin-big-decimal-field';\r\n      }\r\n\r\n      static get properties() {\r\n        return {\r\n          _decimalSeparator: {\r\n            type: String,\r\n            value: '.',\r\n            observer: '__decimalSeparatorChanged'\r\n          }\r\n        }\r\n      }\r\n\r\n      ready() {\r\n        super.ready();\r\n        this.inputElement.setAttribute('inputmode', 'decimal');\r\n      }\r\n\r\n      __decimalSeparatorChanged(separator, oldSeparator) {\r\n        this.allowedCharPattern = '[\\\\d-+' + separator + ']';\r\n\r\n        if (this.value && oldSeparator) {\r\n          this.value = this.value.split(oldSeparator).join(separator);\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    customElements.define(BigDecimalFieldElement.is, BigDecimalFieldElement);\r\n\r\n  });\r\n})();\r\n", "export default require(\"../node_modules/@vaadin/flow-frontend/vaadin-big-decimal-field.js\");"],
  "mappings": ";;;;;AAAA;AAAA;AAeA,KAAC,WAAW;AAEV,UAAI;AAEJ,qBAAe,YAAY,mBAAmB,EAAE,KAAK,MAAM;AAEzD,cAAM,+BAA+B,eAAe,IAAI,mBAAmB,EAAE;AAAA,UAE3E,WAAW,WAAW;AACpB,gBAAI,CAAC,kBAAkB;AACrB,iCAAmB,MAAM,SAAS,UAAU,IAAI;AAChD,+BAAiB,aACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAaJ;AACA,mBAAO;AAAA,UACT;AAAA,UAEA,WAAW,KAAK;AACd,mBAAO;AAAA,UACT;AAAA,UAEA,WAAW,aAAa;AACtB,mBAAO;AAAA,cACL,mBAAmB;AAAA,gBACjB,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,UAAU;AAAA,cACZ;AAAA,YACF;AAAA,UACF;AAAA,UAEA,QAAQ;AACN,kBAAM,MAAM;AACZ,iBAAK,aAAa,aAAa,aAAa,SAAS;AAAA,UACvD;AAAA,UAEA,0BAA0B,WAAW,cAAc;AACjD,iBAAK,qBAAqB,WAAW,YAAY;AAEjD,gBAAI,KAAK,SAAS,cAAc;AAC9B,mBAAK,QAAQ,KAAK,MAAM,MAAM,YAAY,EAAE,KAAK,SAAS;AAAA,YAC5D;AAAA,UACF;AAAA,QAEF;AAEA,uBAAe,OAAO,uBAAuB,IAAI,sBAAsB;AAAA,MAEzE,CAAC;AAAA,IACH,GAAG;AAAA;AAAA;;;AC5EH,IAAO,2DAAQ;",
  "names": []
}
