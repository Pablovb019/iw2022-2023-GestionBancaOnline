{
  "version": 3,
  "sources": ["../../@vaadin/flow-frontend/menubarConnector.js"],
  "sourcesContent": ["/*\r\n * Copyright 2000-2022 Vaadin Ltd.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\r\n * use this file except in compliance with the License. You may obtain a copy of\r\n * the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\r\n * License for the specific language governing permissions and limitations under\r\n * the License.\r\n */\r\nimport './contextMenuConnector.js';\r\n\r\n(function () {\r\n  const tryCatchWrapper = function (callback) {\r\n    return window.Vaadin.Flow.tryCatchWrapper(callback, 'Vaadin Menu Bar');\r\n  };\r\n\r\n  /**\r\n   * Initializes the connector for a menu bar element.\r\n   *\r\n   * @param {HTMLElement} menubar\r\n   * @param {string} appId\r\n   */\r\n  function initLazy(menubar, appId) {\r\n    if (menubar.$connector) {\r\n      return;\r\n    }\r\n\r\n    const observer = new MutationObserver((records) => {\r\n      const hasChangedAttributes = records.some((entry) => {\r\n        const oldValue = entry.oldValue;\r\n        const newValue = entry.target.getAttribute(entry.attributeName);\r\n        return oldValue !== newValue;\r\n      });\r\n\r\n      if (hasChangedAttributes) {\r\n        menubar.$connector.generateItems();\r\n      }\r\n    });\r\n\r\n    menubar.$connector = {\r\n      /**\r\n       * Generates and assigns the items to the menu bar.\r\n       *\r\n       * When the method is called without providing a node id,\r\n       * the previously generated items tree will be used.\r\n       * That can be useful if you only want to sync the disabled and hidden properties of root items.\r\n       *\r\n       * @param {number | undefined} nodeId\r\n       */\r\n      generateItems: tryCatchWrapper((nodeId) => {\r\n        if (!menubar.shadowRoot) {\r\n          // workaround for https://github.com/vaadin/flow/issues/5722\r\n          setTimeout(() => menubar.$connector.generateItems(nodeId));\r\n          return;\r\n        }\r\n\r\n        if (nodeId) {\r\n          menubar.__generatedItems = window.Vaadin.Flow.contextMenuConnector.generateItemsTree(appId, nodeId);\r\n        }\r\n\r\n        let items = menubar.__generatedItems || [];\r\n\r\n        // Propagate disabled state from items to parent buttons\r\n        items.forEach((item) => (item.disabled = item.component.disabled));\r\n\r\n        // Remove hidden items entirely from the array. Just hiding them\r\n        // could cause the overflow button to be rendered without items.\r\n        //\r\n        // The items-prop needs to be set even when all items are visible\r\n        // to update the disabled state and re-render buttons.\r\n        items = items.filter((item) => !item.component.hidden);\r\n\r\n        // Observe for hidden and disabled attributes in case they are changed by Flow.\r\n        // When a change occurs, the observer will re-generate items on top of the existing tree\r\n        // to sync the new attribute values with the corresponding properties in the items array.\r\n        items.forEach((item) => {\r\n          observer.observe(item.component, {\r\n            attributeFilter: ['hidden', 'disabled'],\r\n            attributeOldValue: true\r\n          });\r\n        });\r\n\r\n        menubar.items = items;\r\n\r\n        // Propagate click events from the menu buttons to the item components\r\n        menubar._buttons.forEach((button) => {\r\n          if (button.item && button.item.component) {\r\n            button.addEventListener('click', (e) => {\r\n              if (e.composedPath().indexOf(button.item.component) === -1) {\r\n                button.item.component.click();\r\n                e.stopPropagation();\r\n              }\r\n            });\r\n          }\r\n        });\r\n      })\r\n    };\r\n  }\r\n\r\n  window.Vaadin.Flow.menubarConnector = {\r\n    initLazy(...args) {\r\n      return tryCatchWrapper(initLazy)(...args);\r\n    }\r\n  };\r\n})();\r\n"],
  "mappings": ";;;;;;;;AAeA,kCAAO;AAAA,CAEN,WAAY;AACX,QAAM,kBAAkB,SAAU,UAAU;AAC1C,WAAO,OAAO,OAAO,KAAK,gBAAgB,UAAU,iBAAiB;AAAA,EACvE;AAQA,WAAS,SAAS,SAAS,OAAO;AAChC,QAAI,QAAQ,YAAY;AACtB;AAAA,IACF;AAEA,UAAM,WAAW,IAAI,iBAAiB,CAAC,YAAY;AACjD,YAAM,uBAAuB,QAAQ,KAAK,CAAC,UAAU;AACnD,cAAM,WAAW,MAAM;AACvB,cAAM,WAAW,MAAM,OAAO,aAAa,MAAM,aAAa;AAC9D,eAAO,aAAa;AAAA,MACtB,CAAC;AAED,UAAI,sBAAsB;AACxB,gBAAQ,WAAW,cAAc;AAAA,MACnC;AAAA,IACF,CAAC;AAED,YAAQ,aAAa;AAAA,MAUnB,eAAe,gBAAgB,CAAC,WAAW;AACzC,YAAI,CAAC,QAAQ,YAAY;AAEvB,qBAAW,MAAM,QAAQ,WAAW,cAAc,MAAM,CAAC;AACzD;AAAA,QACF;AAEA,YAAI,QAAQ;AACV,kBAAQ,mBAAmB,OAAO,OAAO,KAAK,qBAAqB,kBAAkB,OAAO,MAAM;AAAA,QACpG;AAEA,YAAI,QAAQ,QAAQ,oBAAoB,CAAC;AAGzC,cAAM,QAAQ,CAAC,SAAU,KAAK,WAAW,KAAK,UAAU,QAAS;AAOjE,gBAAQ,MAAM,OAAO,CAAC,SAAS,CAAC,KAAK,UAAU,MAAM;AAKrD,cAAM,QAAQ,CAAC,SAAS;AACtB,mBAAS,QAAQ,KAAK,WAAW;AAAA,YAC/B,iBAAiB,CAAC,UAAU,UAAU;AAAA,YACtC,mBAAmB;AAAA,UACrB,CAAC;AAAA,QACH,CAAC;AAED,gBAAQ,QAAQ;AAGhB,gBAAQ,SAAS,QAAQ,CAAC,WAAW;AACnC,cAAI,OAAO,QAAQ,OAAO,KAAK,WAAW;AACxC,mBAAO,iBAAiB,SAAS,CAAC,MAAM;AACtC,kBAAI,EAAE,aAAa,EAAE,QAAQ,OAAO,KAAK,SAAS,MAAM,IAAI;AAC1D,uBAAO,KAAK,UAAU,MAAM;AAC5B,kBAAE,gBAAgB;AAAA,cACpB;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,EACF;AAEA,SAAO,OAAO,KAAK,mBAAmB;AAAA,IACpC,YAAY,MAAM;AAChB,aAAO,gBAAgB,QAAQ,EAAE,GAAG,IAAI;AAAA,IAC1C;AAAA,EACF;AACF,GAAG;",
  "names": []
}
